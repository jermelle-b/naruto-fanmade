git config
git init
git clone
git add
git commit
git diff
git reset
git status
git rm
git log
git show
git tag
git branch
git checkout
git merge
git remote
git push
git pull
git stash

commit/options
-a
--all
    Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.
-p
--patch
    Use the interactive patch selection interface to chose which changes to commit. See git-add[1] for details.

-C <commit>
--reuse-message=<commit>
    Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit.

-c <commit>
--reedit-message=<commit>
    Like -C, but with -c the editor is invoked, so that the user can further edit the commit message.

--fixup=<commit>
    Construct a commit message for use with rebase --autosquash. The commit message will be the subject line from the specified commit with a prefix of "fixup! ". See git-rebase[1] for details.

--squash=<commit>
    Construct a commit message for use with rebase --autosquash. The commit message subject line is taken from the specified commit with a prefix of "squash! ". Can be used with additional commit message options (-m/-c/-C/-F). See git-rebase[1] for details.

--reset-author
    When used with -C/-c/--amend options, or when committing after a conflicting cherry-pick, declare that the authorship of the resulting commit now belongs to the committer. This also renews the author timestamp.

--short
    When doing a dry-run, give the output in the short-format. See git-status[1] for details. Implies --dry-run.

--branch
    Show the branch and tracking info even in short-format.

--porcelain
    When doing a dry-run, give the output in a porcelain-ready format. See git-status[1] for details. Implies --dry-run.

--long
    When doing a dry-run, give the output in the long-format. Implies --dry-run.

-z
--null
    When showing short or porcelain status output, print the filename verbatim and terminate the entries with NUL, instead of LF. If no format is given, implies the --porcelain output format. Without the -z option, filenames with "unusual" characters are quoted as explained for the configuration variable core.quotePath (see git-config[1]).

-F <file>
--file=<file>
    Take the commit message from the given file. Use - to read the message from the standard input.

--author=<author>
    Override the commit author. Specify an explicit author using the standard A U Thor <author@example.com> format. Otherwise <author> is assumed to be a pattern and is used to search for an existing commit by that author (i.e. rev-list --all -i --author=<author>); the commit author is then copied from the first such commit found.

--date=<date>
    Override the author date used in the commit.

-m <msg>
--message=<msg>
    Use the given <msg> as the commit message. If multiple -m options are given, their values are concatenated as separate paragraphs.
    The -m option is mutually exclusive with -c, -C, and -F.

-t <file>
--template=<file>
    When editing the commit message, start the editor with the contents in the given file. The commit.template configuration variable is often used to give this option implicitly to the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the -m or -F options.

-s
--signoff
    Add Signed-off-by line by the committer at the end of the commit log message. The meaning of a signoff depends on the project, but it typically certifies that committer has the rights to submit this work under the same license and agrees to a Developer Certificate of Origin (see http://developercertificate.org/ for more information).

-n
--no-verify
    This option bypasses the pre-commit and commit-msg hooks. See also githooks[5].

--allow-empty
    Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit. This option bypasses the safety, and is primarily for use by foreign SCM interface scripts.

--allow-empty-message
    Like --allow-empty this command is primarily for use by foreign SCM interface scripts. It allows you to create a commit with an empty commit message without using plumbing commands like git-commit-tree[1].

--cleanup=<mode>
    This option determines how the supplied commit message should be cleaned up before committing. The <mode> can be strip, whitespace, verbatim, scissors or default.
    strip
        Strip leading and trailing empty lines, trailing whitespace, commentary and collapse consecutive empty lines.
    whitespace
        Same as strip except #commentary is not removed.
    verbatim
        Do not change the message at all.
    scissors
        Same as whitespace except that everything from (and including) the line found below is truncated, if the message is to be edited. "#" can be customized with core.commentChar.